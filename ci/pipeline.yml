---
meta:
  name: cfcr-compiled-deployment
  pipeline: (( grab meta.name ))

  image:
    name: starkandwayne/concourse
    tag: latest

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  github:
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  aws:
    bucket:     (( grab meta.pipeline ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID for your pipeline S3 Bucket" ))
    secret_key: (( param "Please set your AWS Secret Key ID for your pipeline S3 Bucket" ))

  bosh-lite:
    target:     (( param "Please specify the BOSH target URI for the bosh-lite to run test deployments against" ))
    cacert:     (( param "Please specify the BOSH Director Root CA cert" ))
    username:   admin
    password:   (( param "Please specify the BOSH Director admin password" ))

jobs:
- name: future
  plan:
    - get: etcd-compiled-release
      passed: [etcd-compile-release-3541]
    - get: bosh-dns-compiled-release
      passed: [bosh-dns-compile-release-3541]
- name: manifest
  plan:
    - aggregate:
      - get: git
      - get: cfcr-manifests
        params: {include_source_tarball: true, globs: [x]}
      - get: kubo-compiled-release
        passed: [kubo-compile-release-3541]
      # - get: bosh-dns-compiled-release
      #   passed: [bosh-dns-compile-release-3541]
      - get: bpm-compiled-release
        passed: [bpm-compile-release-3541]
      - get: docker-compiled-release
        passed: [docker-compile-release-3541]
      - get: kubo-etcd-compiled-release
        passed: [kubo-etcd-compile-release-3541]
      - get: ubuntu-trusty-stemcell-3541
        passed: [kubo-compile-release-3541, docker-compile-release-3541]
        params: {tarball: false}
    - task: update-manifest
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: cfcr-manifests
          - name: ubuntu-trusty-stemcell-3541
            path: stemcell
          # - name: bosh-dns-compiled-release
          - name: bpm-compiled-release
          - name: docker-compiled-release
          - name: kubo-etcd-compiled-release
          - name: kubo-compiled-release
        outputs:
          - name: pushme
        run:
          path: git/ci/scripts/update-manifest
        params:
          REPO_ROOT: git
          REPO_OUT:  pushme
          REPO_OUT_BRANCH: master
          GIT_EMAIL: (( grab meta.git.email ))
          GIT_NAME:  (( grab meta.git.name ))
    - name: upload-git
      put: git
      params:
        rebase: true
        repository: pushme


- name: bpm-compile-release-3541
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: bpm-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3541
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3541
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
          BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
    - put: bpm-compiled-release
      params:
        file: "compiled-release/bpm/*.tgz"

- name: bosh-dns-compile-release-3541
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: bosh-dns-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3541
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3541
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
          BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
    - put: bosh-dns-compiled-release
      params:
        file: "compiled-release/bosh-dns/*.tgz"

- name: docker-compile-release-3541
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: docker-boshrelease
        trigger: true
      - get: ubuntu-trusty-stemcell-3541
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3541
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
          BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
    - put: docker-compiled-release
      params:
        file: "compiled-release/docker/*.tgz"

- name: etcd-compile-release-3541
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: cfcr-etcd-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3541
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3541
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
          BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
    - put: etcd-compiled-release
      params:
        file: "compiled-release/cfcr-etcd/*.tgz"

- name: kubo-etcd-compile-release-3541
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: kubo-etcd-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3541
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3541
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
          BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
    - put: kubo-etcd-compiled-release
      params:
        file: "compiled-release/kubo-etcd/*.tgz"

- name: kubo-compile-release-3541
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: github
        resource: kubo-release
        trigger: true
      - get: ubuntu-trusty-stemcell-3541
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell-3541
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
          BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
    - put: kubo-compiled-release
      params:
        file: "compiled-release/kubo/*.tgz"


resources:
- name: git
  type: git
  source:
    uri: git@github.com:starkandwayne/cfcr-compiled-deployment.git
    branch:      master
    private_key: (( grab meta.github.private_key ))

- name: cfcr-manifests
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-deployment
    access_token: (( grab meta.github.access_token ))

- name: kubo-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/kubo-release
- name: bosh-dns-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bosh-dns-release
- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/bpm-release
- name: docker-boshrelease
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: docker-boshrelease
    access_token: (( grab meta.github.access_token ))
- name: cfcr-etcd-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: cfcr-etcd-release
    access_token: (( grab meta.github.access_token ))
- name: kubo-etcd-release
  type: github-release
  source:
    owner: pivotal-cf-experimental
    repository: kubo-etcd
    access_token: (( grab meta.github.access_token ))

- name: ubuntu-trusty-stemcell-3541
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent
    version_family: 3541.latest

- name: bpm-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "bpm/.*-(\\d+).tgz"

- name: bosh-dns-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "bosh-dns/.*-(\\d+).tgz"

- name: docker-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "docker/.*-(\\d+).tgz"

- name: etcd-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "cfcr-etcd/.*-(\\d+).tgz"

- name: kubo-etcd-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "kubo-etcd/.*-(\\d+).tgz"

- name: kubo-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "kubo/.*-(\\d+).tgz"
